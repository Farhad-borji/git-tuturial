git -- help  => all info you need

// git --version => give you the version of git

// git config --global/--local user.name  => config your name for projects
// git config --global/--local user.email  => config your email for projects

// pwd  => show the location git working

// ls  => show the files in the git location

// mkdir [folder name]  => make directory
// rmdir [folder name]  => remove directory

// cd [location]/[location]/[location]  => go to the next location
// cd ..  => back to parent location

// git init  =>  Create an empty Git repository or reinitialize an existing one (run the git in that location)

// code .  => run the  vscode in that location 

// touch [file name.file type] => for making file

// git status  =>  Show the working tree status

// git add [file name] =>  Add a file contents to the stage

// git add .  =>  Add all files contents to the stage

// git commit -m ""  =>  Record changes to the repository and make a note for it

// git log => show commit logs
// git log --oneLine => show the commit logs in one line 

// git diff  => show the change in your file code

// cat [file name]  => show the file code

// git commit -a -m "[note]"  =>  add and commit files at the same time

// git restore [file name] =>  restore the latest file you committed and discard the changes that not committed
// git restore . =>  restore the latest files you committed and discard the changes that not committed

// git restore --staged [file name] ==> restore file from stage to not staged
// git restore --staged . ==> restore all files from stage to not staged

// git commit --amend -m "[new note]"  ==> change the last commit note

// git show [commit ID] ==>  show commit changes

// git branch  => show the branches list
// git branch [new branch name]  => create a new branch

// git checkout [name of the existed branch]  =>  switch to the selected branch

// git merge [branch you wanted to merge to this branch] => merge the selected branch to the branch you in

// git branch -d [branch name] ==> delete selected branch

// git remote add origin [repository link] ==> add a repository to the project

// git branch -M main  =>  change the name of master branch to main 

// git push -u origin main  => push the project to the linked repository
// git push ==> use it for pushing the project after the first time we pushed the project
// git push --set-upstream origin [branch name]  => push the new branch to the repository 

// git pull  => get project update from repository link

// git ignore [file name] =>



usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--config-env=<name>=<envvar>] <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
  // add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
  // restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   // log       Show commit logs
   // show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   // commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   // pull      Fetch from and integrate with another repository or a local branch
   // push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.